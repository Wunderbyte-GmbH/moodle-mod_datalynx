{"version":3,"file":"fieldgroups.min.js","sources":["../src/fieldgroups.js"],"sourcesContent":["define([\"jquery\"], function($) {\n\n    return {\n\n        init: function(fieldgroupname, defaultlines, maxlines, requiredlines, fieldgroup) {\n\n            // We hide lines after the last line we show by default.\n            defaultlines++;\n\n            // Loop from defaultlines to maxlines.\n            for (var line = defaultlines; line <= maxlines; line++) {\n                $(\"div[data-field-name='\" + fieldgroupname + \"'] [data-line='\" + line + \"']\").hide(); // Hide the whole line.\n            }\n\n            // Add button functionality.\n            $(\"div.datalynx-field-wrapper #id_addline\").click(function (e) {\n                e.preventDefault(); // Don't follow hrefs.\n                $(this).closest(\".datalynx-field-wrapper\").find(\"[data-line]:hidden:first\").show();\n\n                // Add one to lastvisible.\n                if ($('input[name='+fieldgroup+'_lastvisible]').val() < maxlines) {\n                    $('input[name='+fieldgroup+'_lastvisible]').get(0).value++;\n                }\n            });\n\n            // Remove this one line.\n            $(\"div[data-field-name='\" + fieldgroupname + \"'] [data-removeline]\").each(function () {\n                    $(this).off( \"click\" );\n                    $(this).click(function(e) {\n                        e.preventDefault(); // Don't follow hrefs.\n                        var thisline = $(this).closest('.lines');\n                        var lineid = thisline.data(\"line\");\n                        var parentcontainer = thisline.closest('.datalynx-field-wrapper');\n                        var lastvisibleline = parentcontainer.find('.lines:visible').last();\n                        var lastvisiblelineid = lastvisibleline.data('line');\n                        // Remove all files from associated file manager.\n                        thisline.find('.fp-file').each(function () {\n                            $(this).click();\n                            $(\".fp-file-delete:visible\").trigger('click');\n                            $(\".fp-dlg-butconfirm:visible\").trigger('click');\n                        });\n                        // Remove data from input fields.\n                        $(this).closest('.lines').find('input').each(function () {\n                            // Do not affect hidden inputs.\n                            if ($(this).attr('type') != 'hidden') {\n                                $(this).val('');\n                            }\n                        });\n                        // Remove atto editor content.\n                        $(this).closest('.lines').find('.editor_atto_content').each(function () {\n                            $(this).html('');\n                        });\n                        // Remove textarea content.\n                        $(this).closest('.lines').find('textarea').each(function () {\n                            $(this).val('');\n                        });\n                        // Remove single select content.\n                        $(this).closest('.lines').find('select').each(function () {\n                            $(this).find('option[value=\"\"]').prop('selected', true);\n                        });\n                        // Deactivate the time/date field and remove team members.\n                        $(this).closest('.lines').find('[id$=enabled]:checked,' +\n                            ' .form-autocomplete-selection .tag').each(function () {\n                            $(this).trigger('click');\n                        });\n\n                        // Subtract one from lastvisible.\n                        $('input[name='+fieldgroup+'_lastvisible]').get(0).value--;\n\n                        // Hide the empty lines if not required or the only line remaining.\n                        // TODO: Changed this to >= so people can remove the first line as well.\n                        if(lineid > requiredlines && lineid >= 1) {\n                            thisline.hide();\n                            // Alter DOM: Reorder lines and make content ordered properly.\n                            // Strategy: The deleted line should be moved under the last\n                            // visible line. All visible lines from thisline up to lastvisibline get moved one line up.\n                            // Lines not visible should not be changed.\n                            // thisline will be first not visible line and gets id of lastvisibleline.\n                            // TODO: Also move the content if the lines in the right place.\n                            if (lineid != maxlines) {\n                                parentcontainer.find('[data-line]').each(function () {\n                                    if($(this).data('line') > lineid && $(this).data('line') <= lastvisiblelineid) {\n                                        // Line numbers minus one.\n                                        var newid = $(this).data('line') - 1;\n                                        $(this).attr('data-line', newid);\n                                    }\n                                    if($(this).data('line') == lineid) {\n                                    // New line number for removed line.\n                                    $(this).attr('data-line', lastvisiblelineid);\n                                    }\n                                });\n                            }\n                            var newcontentorder = [];\n                            parentcontainer.find('[data-line]').each(function () {\n                                newcontentorder[$(this).data('line')] = $(this);\n                            });\n                            parentcontainer.remove('.lines');\n                            for (var i = newcontentorder.length; i >= 0; i--){\n                                parentcontainer.prepend(newcontentorder[i]);\n                            }\n                        }\n\n                    });\n            });\n\n        }\n\n    };\n});\n"],"names":["define","$","init","fieldgroupname","defaultlines","maxlines","requiredlines","fieldgroup","line","hide","click","e","preventDefault","this","closest","find","show","val","get","value","each","off","thisline","lineid","data","parentcontainer","lastvisiblelineid","last","trigger","attr","html","prop","newid","newcontentorder","remove","i","length","prepend"],"mappings":"AAAAA,kCAAO,CAAC,WAAW,SAASC,SAEjB,CAEHC,KAAM,SAASC,eAAgBC,aAAcC,SAAUC,cAAeC,gBAM7D,IAAIC,OAHTJ,aAG8BI,MAAQH,SAAUG,OAC5CP,EAAE,wBAA0BE,eAAiB,kBAAoBK,KAAO,MAAMC,OAIlFR,EAAE,0CAA0CS,OAAM,SAAUC,GACxDA,EAAEC,iBACFX,EAAEY,MAAMC,QAAQ,2BAA2BC,KAAK,4BAA4BC,OAGxEf,EAAE,cAAcM,WAAW,iBAAiBU,MAAQZ,UACpDJ,EAAE,cAAcM,WAAW,iBAAiBW,IAAI,GAAGC,WAK3DlB,EAAE,wBAA0BE,eAAiB,wBAAwBiB,MAAK,WAClEnB,EAAEY,MAAMQ,IAAK,SACbpB,EAAEY,MAAMH,OAAM,SAASC,GACnBA,EAAEC,qBACEU,SAAWrB,EAAEY,MAAMC,QAAQ,UAC3BS,OAASD,SAASE,KAAK,QACvBC,gBAAkBH,SAASR,QAAQ,2BAEnCY,kBADkBD,gBAAgBV,KAAK,kBAAkBY,OACrBH,KAAK,WAE7CF,SAASP,KAAK,YAAYK,MAAK,WAC3BnB,EAAEY,MAAMH,QACRT,EAAE,2BAA2B2B,QAAQ,SACrC3B,EAAE,8BAA8B2B,QAAQ,YAG5C3B,EAAEY,MAAMC,QAAQ,UAAUC,KAAK,SAASK,MAAK,WAEb,UAAxBnB,EAAEY,MAAMgB,KAAK,SACb5B,EAAEY,MAAMI,IAAI,OAIpBhB,EAAEY,MAAMC,QAAQ,UAAUC,KAAK,wBAAwBK,MAAK,WACxDnB,EAAEY,MAAMiB,KAAK,OAGjB7B,EAAEY,MAAMC,QAAQ,UAAUC,KAAK,YAAYK,MAAK,WAC5CnB,EAAEY,MAAMI,IAAI,OAGhBhB,EAAEY,MAAMC,QAAQ,UAAUC,KAAK,UAAUK,MAAK,WAC1CnB,EAAEY,MAAME,KAAK,oBAAoBgB,KAAK,YAAY,MAGtD9B,EAAEY,MAAMC,QAAQ,UAAUC,KAAK,4DACWK,MAAK,WAC3CnB,EAAEY,MAAMe,QAAQ,YAIpB3B,EAAE,cAAcM,WAAW,iBAAiBW,IAAI,GAAGC,QAIhDI,OAASjB,eAAiBiB,QAAU,EAAG,CACtCD,SAASb,OAOLc,QAAUlB,UACVoB,gBAAgBV,KAAK,eAAeK,MAAK,cAClCnB,EAAEY,MAAMW,KAAK,QAAUD,QAAUtB,EAAEY,MAAMW,KAAK,SAAWE,kBAAmB,KAEvEM,MAAQ/B,EAAEY,MAAMW,KAAK,QAAU,EACnCvB,EAAEY,MAAMgB,KAAK,YAAaG,OAE3B/B,EAAEY,MAAMW,KAAK,SAAWD,QAE3BtB,EAAEY,MAAMgB,KAAK,YAAaH,0BAI9BO,gBAAkB,GACtBR,gBAAgBV,KAAK,eAAeK,MAAK,WACrCa,gBAAgBhC,EAAEY,MAAMW,KAAK,SAAWvB,EAAEY,SAE9CY,gBAAgBS,OAAO,cAClB,IAAIC,EAAIF,gBAAgBG,OAAQD,GAAK,EAAGA,IACzCV,gBAAgBY,QAAQJ,gBAAgBE"}