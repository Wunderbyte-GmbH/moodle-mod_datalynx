{"version":3,"file":"teammemberselect.min.js","sources":["../src/teammemberselect.js"],"sourcesContent":["define(['core/ajax', 'core/toast', 'core/str'], function(Ajax, Toast, Str) {\n    return {\n        init(datalynxId, fieldId, userurl, userName, canUnsubscribe) {\n            const viewContainer = document.querySelectorAll(`[data-id=\"${datalynxId}\"]`);\n            Promise.all([\n                Str.get_string('subscribe', 'mod_datalynx'),\n                Str.get_string('unsubscribe', 'mod_datalynx')\n            ]).then(strings => {\n                const subscribeString = strings[0];\n                const unsubscribeString = strings[1];\n\n                viewContainer.forEach(element => {\n                    if (element.getAttribute(\"data-listeneradded\") !== \"1\") {\n                        element.setAttribute(\"data-listeneradded\", \"1\");\n                        document.querySelectorAll('a.datalynxfield_subscribe').forEach(link => {\n                            const params = this.extractParams(link.href.split('?')[1]);\n                            if (params.fieldid !== fieldId.toString()) {\n                                return;\n                            }\n                            link.addEventListener('click', (e) => {\n                                e.preventDefault();\n                                const updatedParams = this.extractParams(link.href.split('?')[1]);\n                                this.handleSubscription(link, updatedParams, userurl, userName,\n                                    canUnsubscribe, subscribeString, unsubscribeString);\n                            });\n                        });\n                    }\n                });\n\n            });\n        },\n\n        handleSubscription(link, params, userurl, username, canunsubscribe,\n                           subscribeString, unsubscribeString) {\n            Ajax.call([{\n                methodname: 'mod_datalynx_team_subscription',\n                args: params,\n                done: (response) => {\n                    if (response.success) {\n                        if (link.classList.contains('subscribed')) {\n                            if (canunsubscribe) {\n                                this.updateSubscriptionLink(link, 'subscribe', subscribeString);\n                                this.removeUserFromList(link.parentElement, userurl);\n                            }\n                        } else {\n                            this.updateSubscriptionLink(link, 'unsubscribe', unsubscribeString);\n                            this.addUserToList(link.parentElement, userurl, username);\n                        }\n                    } else {\n                        const errorMessage = response.error;\n                        Toast.add(errorMessage);\n                    }\n                },\n                fail: (error) => {\n                    const errorMessage = error.message;\n                    Toast.add(errorMessage);\n                }\n            }]);\n        },\n\n        updateSubscriptionLink(link, action, text) {\n            link.classList.toggle('subscribed');\n            link.title = text;\n            link.textContent = text;\n            link.href = link.href.replace(/(subscribe|unsubscribe)/, action);\n        },\n\n        removeUserFromList(linkContainer, userurl) {\n            if (linkContainer) {\n                const teamMemberList = linkContainer.querySelector('.team-member-list');\n                if (teamMemberList) {\n                    const listItem = teamMemberList.querySelector(`li a[href=\"${userurl}\"]`);\n                    if (listItem) {\n                        listItem.closest('li').remove();\n                        if (teamMemberList.children.length === 0) {\n                            teamMemberList.remove();\n                        }\n                    }\n                }\n            }\n        },\n\n        addUserToList(linkContainer, userurl, username) {\n            let teamMemberList = linkContainer.querySelector('.team-member-list');\n            if (!teamMemberList) {\n                teamMemberList = document.createElement('ul');\n                teamMemberList.classList.add('team-member-list');\n                linkContainer.insertBefore(teamMemberList, linkContainer.querySelector(\"a.datalynxfield_subscribe\"));\n            }\n\n            const listItem = document.createElement('li');\n            listItem.innerHTML = `<a href=\"${userurl}\">${username}</a>`;\n            teamMemberList.appendChild(listItem);\n        },\n\n        extractParams(paramString) {\n            return paramString.split('&').reduce((acc, param) => {\n                const [key, value] = param.split('=');\n                acc[key] = decodeURIComponent(value || '');\n                return acc;\n            }, {});\n        }\n    };\n});\n"],"names":["define","Ajax","Toast","Str","init","datalynxId","fieldId","userurl","userName","canUnsubscribe","viewContainer","document","querySelectorAll","Promise","all","get_string","then","strings","subscribeString","unsubscribeString","forEach","element","getAttribute","setAttribute","link","this","extractParams","href","split","fieldid","toString","addEventListener","e","preventDefault","updatedParams","handleSubscription","params","username","canunsubscribe","call","methodname","args","done","response","success","classList","contains","updateSubscriptionLink","removeUserFromList","parentElement","addUserToList","errorMessage","error","add","fail","message","action","text","toggle","title","textContent","replace","linkContainer","teamMemberList","querySelector","listItem","closest","remove","children","length","createElement","insertBefore","innerHTML","appendChild","paramString","reduce","acc","param","key","value","decodeURIComponent"],"mappings":"AAAAA,uCAAO,CAAC,YAAa,aAAc,aAAa,SAASC,KAAMC,MAAOC,WAC3D,CACHC,KAAKC,WAAYC,QAASC,QAASC,SAAUC,sBACnCC,cAAgBC,SAASC,qCAA8BP,kBAC7DQ,QAAQC,IAAI,CACRX,IAAIY,WAAW,YAAa,gBAC5BZ,IAAIY,WAAW,cAAe,kBAC/BC,MAAKC,gBACEC,gBAAkBD,QAAQ,GAC1BE,kBAAoBF,QAAQ,GAElCP,cAAcU,SAAQC,UACiC,MAA/CA,QAAQC,aAAa,wBACrBD,QAAQE,aAAa,qBAAsB,KAC3CZ,SAASC,iBAAiB,6BAA6BQ,SAAQI,OAC5CC,KAAKC,cAAcF,KAAKG,KAAKC,MAAM,KAAK,IAC5CC,UAAYvB,QAAQwB,YAG/BN,KAAKO,iBAAiB,SAAUC,IAC5BA,EAAEC,uBACIC,cAAgBT,KAAKC,cAAcF,KAAKG,KAAKC,MAAM,KAAK,SACzDO,mBAAmBX,KAAMU,cAAe3B,QAASC,SAClDC,eAAgBS,gBAAiBC,iCAS7DgB,mBAAmBX,KAAMY,OAAQ7B,QAAS8B,SAAUC,eACjCpB,gBAAiBC,mBAChClB,KAAKsC,KAAK,CAAC,CACPC,WAAY,iCACZC,KAAML,OACNM,KAAOC,cACCA,SAASC,QACLpB,KAAKqB,UAAUC,SAAS,cACpBR,sBACKS,uBAAuBvB,KAAM,YAAaN,sBAC1C8B,mBAAmBxB,KAAKyB,cAAe1C,gBAG3CwC,uBAAuBvB,KAAM,cAAeL,wBAC5C+B,cAAc1B,KAAKyB,cAAe1C,QAAS8B,eAEjD,OACGc,aAAeR,SAASS,MAC9BlD,MAAMmD,IAAIF,gBAGlBG,KAAOF,cACGD,aAAeC,MAAMG,QAC3BrD,MAAMmD,IAAIF,mBAKtBJ,uBAAuBvB,KAAMgC,OAAQC,MACjCjC,KAAKqB,UAAUa,OAAO,cACtBlC,KAAKmC,MAAQF,KACbjC,KAAKoC,YAAcH,KACnBjC,KAAKG,KAAOH,KAAKG,KAAKkC,QAAQ,0BAA2BL,SAG7DR,mBAAmBc,cAAevD,YAC1BuD,cAAe,OACTC,eAAiBD,cAAcE,cAAc,wBAC/CD,eAAgB,OACVE,SAAWF,eAAeC,mCAA4BzD,eACxD0D,WACAA,SAASC,QAAQ,MAAMC,SACgB,IAAnCJ,eAAeK,SAASC,QACxBN,eAAeI,aAOnCjB,cAAcY,cAAevD,QAAS8B,cAC9B0B,eAAiBD,cAAcE,cAAc,qBAC5CD,iBACDA,eAAiBpD,SAAS2D,cAAc,MACxCP,eAAelB,UAAUQ,IAAI,oBAC7BS,cAAcS,aAAaR,eAAgBD,cAAcE,cAAc,qCAGrEC,SAAWtD,SAAS2D,cAAc,MACxCL,SAASO,6BAAwBjE,qBAAY8B,iBAC7C0B,eAAeU,YAAYR,WAG/BvC,cAAcgD,aACHA,YAAY9C,MAAM,KAAK+C,QAAO,CAACC,IAAKC,eAChCC,IAAKC,OAASF,MAAMjD,MAAM,YACjCgD,IAAIE,KAAOE,mBAAmBD,OAAS,IAChCH,MACR"}